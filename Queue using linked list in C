#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct node {
int data;
struct node *next;
};
struct node *front = NULL;
struct node *rear = NULL;
void enqueue() {
struct node *newnode = (struct node*)malloc(sizeof(struct node));
if (newnode == NULL) {
printf("Memory not allocated\n");
}
else {
int element;
printf("Enter element\n");
scanf("%d", &element);
newnode->data = element;
newnode->next = NULL;
if (front == NULL) {
front = newnode;
rear = newnode;
}
else {
rear->next = newnode;
rear = newnode;
}
printf("Entered value is %d\n", newnode->data);
 }
}
void dequeue() {
if (front == NULL) {
printf("Queue is empty");
}
else {
struct node *temp = front;
printf("Element deleted is %d", temp->data);
front = front->next;
free(temp);
}
}
void peek() {
if (front == NULL) {
printf("Queue is empty");
}
else {
printf("1st element is %d\n", front->data);
}
}
void display() {
if (front == NULL) {
printf("Queue is empty");
}
else {
struct node *temp = front;
while (temp != NULL) {
printf("%d\t", temp->data);
temp = temp->next;
}
}
}
void main() {
int choice;
while (1) {
printf("\n1.Enqueue\n2.Dequeue\n3.Peek\n4.Display\n5.Exit\n");
scanf("%d", &choice);
switch (choice) {
case 1:
enqueue();
break;
case 2:
dequeue();
break;
case 3:
peek();
break;
case 4:
display();
break;
case 5:
exit(0);
break;
default:
printf("invalid choice");
break;
}
}
_getch();
}
