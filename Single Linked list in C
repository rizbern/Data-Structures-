#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct node {
int data;
struct node *next;
};
struct node *head = NULL;
void insertatstart() {
struct node *newnode = (struct node*)malloc(sizeof(struct node));
if (newnode == NULL) {
printf("Memory not allocated");
}
else {
int element;
printf("Enter element");
scanf("%d", &element);
newnode->data = element;
newnode->next = NULL;
if (head == NULL) {
head = newnode;
}
else {
newnode->next = head;
head = newnode;
}
}
printf("ELement added is %d\n", newnode->data);
}
void insertatend() {
struct node *newnode = (struct node*)malloc(sizeof(struct node));
if (head == NULL) {
printf("Empty LL");
}
else {
struct node *temp = head;
int element;
printf("Enter element");
scanf("%d", &element);
newnode->data = element;
newnode->next = NULL;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newnode;
}
printf("Element added is %d\n", newnode->data);
}
void display() {
if (head == NULL) {
printf("Empty LL");
}
else {
struct node *temp = head;
while (temp != NULL) {
printf("%d\t", temp->data);
temp = temp->next;
}
}
}
void insertatspecific() {
struct node *newnode = (struct node*)malloc(sizeof(struct node));
int element;
printf("Enter element");
scanf("%d", &element);
newnode->data = element;
newnode->next = NULL;
if (head == NULL) {
printf("Empty LL");
}
else {
int pos;
printf("Enter position to insert");
scanf("%d", &pos);
struct node *temp = head;
struct node *ptr = head;
for (int i = 1;i < pos;i++) {//WORKS ONLY AFTER POSITION 1
ptr = temp;
temp = temp->next;
}
ptr->next = newnode;
newnode->next = temp;
}
}
void deleteatbegin() {
if (head == NULL) {
printf("Empty LL");
}
else {
struct node *temp = head;
head = head->next;
printf("Element deleted is %d\n", temp->data);
free(temp);
}
}
void deleteatend() {
if (head == NULL) {
printf("Empty LL");
}
else {
struct node *temp = head;
struct node *ptr = head;
while (temp->next != NULL) {
ptr = temp;
temp = temp->next;
}
printf("ELement deleted is %d\n", temp->data);
ptr->next = NULL;
free(temp);
}
}
void deleteatspecific() {
if (head == NULL) {
printf("Empty LL");
}
else {
int pos;
printf("Enter position to delete");
scanf("%d", &pos);
struct node *temp = head;
struct node *ptr = head;
for (int i = 1;i < pos;i++) {//WORKS ONLY AFTER POSITION 1
ptr = temp;
temp = temp->next;
}
ptr->next = temp->next;
free(temp);
}
}
void search() {
if (head == NULL) {
printf("Empty LL");
}
else {
struct node *temp = head;
int key, flag = 0;
printf("Enter key to search");
scanf("%d", &key);
while (temp != NULL) {
if (key == temp->data) {
flag = 1;
printf("Element found");
}
temp = temp->next;
}
if (flag == 0) {
printf("Element not found");
}
}
}
void main() {
int choice;
while (1) {
printf("\n1.Insert at start\n2.Insert at end\n3.Insert at specific\n4.Delete
at start\n5.Delete at end\n6.Delete at specific\n7.Search\n8.Display\n9.Exit\n");
scanf("%d", &choice);
switch (choice) {
case 1:
insertatstart();
break;
case 2:
insertatend();
break;
case 3:
insertatspecific();
break;
case 4:
deleteatbegin();
break;
case 5:
deleteatend();
break;
case 6:
deleteatspecific();
break;
case 7:
search();
break;
case 8:
display();
break;
case 9:
exit(0);
break;
default:
printf("Invalid choice");
break;
}
}
_getch();
}
